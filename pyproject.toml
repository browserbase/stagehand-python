[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stagehand"
version = "0.0.6"
description = "Python SDK for Stagehand"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Browserbase, Inc.", email = "support@browserbase.com" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"
dependencies = [
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
    "pydantic>=1.10.0",
    "playwright>=1.42.1",
    "requests>=2.31.0",
    "browserbase>=1.4.0",
    "rich>=14.0.0",
    "openai>=1.83.0",
    "anthropic>=0.51.0",
    "litellm>=1.72.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.1.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "ruff",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/browserbase/stagehand-python"
Repository = "https://github.com/browserbase/stagehand-python"

[tool.setuptools]
# Omit explicit package list so we can use the nested `.packages.find` table below.

[tool.setuptools.packages.find]
where = ["."]
include = ["stagehand*"]

[tool.setuptools.package-data]
stagehand = ["domScripts.js"]

[tool.ruff]
# Same as Black
line-length = 88

# Target Python version
target-version = "py39" # Adjust to your version

# Exclude a variety of commonly ignored directories
exclude = [
    ".git",
    ".ruff_cache",
    "__pycache__",
    "venv",
    ".venv",
    "dist",
    "tests",
]

# Define lint-specific settings here
[tool.ruff.lint]
select = ["E", "F", "B", "C4", "UP", "N", "I", "C"]
# Ignore line length errors - let Black handle those
ignore = ["E501", "C901"]
# Allow autofix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Naming conventions are part of the N rules
[tool.ruff.lint.pep8-naming]
# Allow underscores in class names (e.g. Test_Case)
classmethod-decorators = ["classmethod", "validator"]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
# Ignore imported but unused in __init__.py files
"__init__.py" = ["F401"]
# Ignore unused imports in tests
"tests/*" = ["F401", "F811"]

# Add more customizations if needed
[tool.ruff.lint.pydocstyle]
convention = "google"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=stagehand",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    # "--cov-fail-under=75",  # Commented out for future addition
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--tb=short",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests requiring multiple components",
    "e2e: End-to-end tests with full workflows",
    "slow: Tests that take longer to run",
    "browserbase: Tests requiring Browserbase connection",
    "local: Tests for local browser functionality",
    "llm: Tests involving LLM interactions",
    "mock: Tests using mock objects only",
    "performance: Performance and load tests",
    "smoke: Quick smoke tests for basic functionality",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pytest_asyncio",
    "ignore::RuntimeWarning",
]
minversion = "7.0"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | python-sdk
)/
'''
# Ensure Black will wrap long strings and docstrings
skip-string-normalization = false
preview = true

# isort configuration to work with Black
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = ["**/venv/**", "**/.venv/**", "**/__pycache__/**"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["stagehand/__init__.py:__version__"]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = false # set this to true when ready for v1
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = ""
exclude_commit_patterns = []
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
allowed_tags = [
    "feat",
    "fix",
    "perf",
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
