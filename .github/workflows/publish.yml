name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools ruff black
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # TODO add playwright install for CI pytest
          
      - name: Run linting and formatting
        run: |
          # Run linter
          black --check --diff stagehand
          
          # Run Ruff formatter check (without modifying files)
          ruff check stagehand
          
      # TODO: add back as soon as CI is passing
      # - name: Run tests
      #   run: |
      #     pytest
          
      - name: Calculate new version
        id: version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate new version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"
          
      - name: Update version files
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Update pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Update __init__.py
          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" stagehand/__init__.py
          
          echo "Updated version to $NEW_VERSION in pyproject.toml and __init__.py"
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Create version bump branch and PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="release/v${NEW_VERSION}"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Commit changes
          git add pyproject.toml stagehand/__init__.py
          git commit -m "Bump version to v${NEW_VERSION}"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          # Create PR
          gh pr create \
            --title "Release v${NEW_VERSION}" \
            --body "Automated version bump to v${NEW_VERSION} for ${{ github.event.inputs.release_type }} release." \
            --base main \
            --head "$BRANCH_NAME"
          
      - name: Wait for PR to be merged
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="release/v${NEW_VERSION}"
          
          echo "Waiting for PR to be merged..."
          
          # Wait for PR to be merged (check every 30 seconds for up to 10 minutes)
          for i in {1..20}; do
            if gh pr view "$BRANCH_NAME" --json state --jq '.state' | grep -q "MERGED"; then
              echo "PR has been merged!"
              break
            elif gh pr view "$BRANCH_NAME" --json state --jq '.state' | grep -q "CLOSED"; then
              echo "PR was closed without merging. Exiting."
              exit 1
            else
              echo "PR is still open. Waiting 30 seconds... (attempt $i/20)"
              sleep 30
            fi
            
            if [ $i -eq 20 ]; then
              echo "Timeout waiting for PR to be merged."
              exit 1
            fi
          done
          
      - name: Checkout main and create tag
        run: |
          # Switch back to main and pull latest changes
          git checkout main
          git pull origin main
          
          # Create and push tag
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          
      - name: Build package
        run: |
          python -m build
          
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
          
      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          generate_release_notes: true 